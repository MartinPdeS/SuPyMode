
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/workflow/plot_workflow_02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_workflow_plot_workflow_02.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_workflow_plot_workflow_02.py:


2x2 Coupler
===========

.. GENERATED FROM PYTHON SOURCE LINES 8-9

Importing the script dependencies

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: Python

    from SuPyMode.workflow import Workflow, fiber_loader, Boundaries, BoundaryValue, DomainAlignment, Profile, StructureType

    from PyOptik import MaterialBank

    wavelength = 1550e-9








.. GENERATED FROM PYTHON SOURCE LINES 16-19

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 19-38

.. code-block:: Python

    clad_structure = Profile()

    clad_structure.add_structure(
        structure_type=StructureType.CIRCULAR,
        number_of_fibers=4,
        fusion_degree=0.5,
        fiber_radius=62.5e-6
    )

    clad_structure.refractive_index = MaterialBank.fused_silica.compute_refractive_index(wavelength)  # Refractive index of silica at the specified wavelength


    fiber_list = [
        fiber_loader.load_fiber('DCF1300S_33', clad_refractive_index=clad_structure.refractive_index, position=clad_structure.cores[0]),
        fiber_loader.load_fiber('DCF1300S_26', clad_refractive_index=clad_structure.refractive_index, position=clad_structure.cores[1]),
        fiber_loader.load_fiber('DCF1300S_42', clad_refractive_index=clad_structure.refractive_index, position=clad_structure.cores[2]),
        fiber_loader.load_fiber('DCF1300S_33', clad_refractive_index=clad_structure.refractive_index, position=clad_structure.cores[3]),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Defining the boundaries of the system

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python

    boundaries = [
        Boundaries(right=BoundaryValue.SYMMETRIC, top=BoundaryValue.SYMMETRIC),
        Boundaries(right=BoundaryValue.SYMMETRIC, top=BoundaryValue.ANTI_SYMMETRIC),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 46-49

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 49-70

.. code-block:: Python

    workflow = Workflow(
        fiber_list=fiber_list,          # List of fiber to be added in the mesh, the order matters.
        clad_structure=clad_structure,  # Cladding structure, if None provided then no cladding is set.
        wavelength=wavelength,          # Wavelength used for the mode computation.
        resolution=60,                  # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds=DomainAlignment.LEFT,  # Mesh x-boundary structure.
        y_bounds=DomainAlignment.BOTTOM,# Mesh y-boundary structure.
        boundaries=boundaries,          # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=2,                # Total computed and sorted mode.
        n_added_mode=2,                 # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        debug_mode=0,                   # Print the iteration step for the solver plus some other important steps.
        auto_label=True,                # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.1,                  # Final value of inverse taper ratio to simulate
    )

    workflow.initialize_geometry(plot=True)  # Initialize the geometry and plot it

    workflow.run_solver()  # Run the solver to compute the modes

    workflow.geometry.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/workflow/images/sphx_glr_plot_workflow_02_001.png
         :alt: Fiber structure, Fiber structure
         :srcset: /gallery/workflow/images/sphx_glr_plot_workflow_02_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/workflow/images/sphx_glr_plot_workflow_02_002.png
         :alt: Fiber structure, Fiber structure
         :srcset: /gallery/workflow/images/sphx_glr_plot_workflow_02_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1000x500 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Field computation: :math:`E_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: Python

    _ = workflow.plot(plot_type='field', itr_list=[1.0, 0.1])




.. image-sg:: /gallery/workflow/images/sphx_glr_plot_workflow_02_003.png
   :alt: $LP01$ slice: 0  itr: 1.000, $LP21_a$ slice: 0  itr: 1.000, $LP11_b$ slice: 0  itr: 1.000, $LP31_b$ slice: 0  itr: 1.000, $LP01$ slice: 499  itr: 0.100, $LP21_a$ slice: 499  itr: 0.100, $LP11_b$ slice: 499  itr: 0.100, $LP31_b$ slice: 499  itr: 0.100
   :srcset: /gallery/workflow/images/sphx_glr_plot_workflow_02_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 76-78

Effective index: :math:`n^{eff}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 78-80

.. code-block:: Python

    _ = workflow.plot(plot_type='beta')




.. image-sg:: /gallery/workflow/images/sphx_glr_plot_workflow_02_004.png
   :alt: plot workflow 02
   :srcset: /gallery/workflow/images/sphx_glr_plot_workflow_02_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-83

Modal normalized coupling: :math:`C_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python

    _ = workflow.plot(plot_type='normalized-coupling')




.. image-sg:: /gallery/workflow/images/sphx_glr_plot_workflow_02_005.png
   :alt: plot workflow 02
   :srcset: /gallery/workflow/images/sphx_glr_plot_workflow_02_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 86-88

Adiabatic criterion: :math:`\tilde{C}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python

    _ = workflow.plot(plot_type='adiabatic', save_filename='test')


    # -



.. image-sg:: /gallery/workflow/images/sphx_glr_plot_workflow_02_006.png
   :alt: plot workflow 02
   :srcset: /gallery/workflow/images/sphx_glr_plot_workflow_02_006.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.609 seconds)


.. _sphx_glr_download_gallery_workflow_plot_workflow_02.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_workflow_02.ipynb <plot_workflow_02.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_workflow_02.py <plot_workflow_02.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_workflow_02.zip <plot_workflow_02.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

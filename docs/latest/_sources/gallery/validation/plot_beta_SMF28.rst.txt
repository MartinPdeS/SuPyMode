
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/validation/plot_beta_SMF28.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_validation_plot_beta_SMF28.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_validation_plot_beta_SMF28.py:


Propagation constant: DCFC
==========================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

Imports
~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 9-20

.. code-block:: Python

    import numpy
    from SuPyMode.workflow import Workflow, fiber_loader, Boundaries, BoundaryValue, DomainAlignment
    from PyOptik import MaterialBank

    from PyFiberModes import LP01
    from PyFiberModes.fiber import load_fiber
    import matplotlib.pyplot as plt

    wavelength = 1550e-9
    fiber_name = 'SMF28'








.. GENERATED FROM PYTHON SOURCE LINES 21-24

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 24-29

.. code-block:: Python

    fiber_list = [
        fiber_loader.load_fiber(fiber_name, clad_refractive_index=MaterialBank.fused_silica.compute_refractive_index(wavelength))  # Refractive index of silica at the specified wavelength
    ]









.. GENERATED FROM PYTHON SOURCE LINES 30-31

Defining the boundaries of the system

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: Python

    boundaries = [
        Boundaries(right=BoundaryValue.SYMMETRIC, bottom=BoundaryValue.SYMMETRIC),
        Boundaries(right=BoundaryValue.SYMMETRIC, bottom=BoundaryValue.ANTI_SYMMETRIC)
    ]








.. GENERATED FROM PYTHON SOURCE LINES 37-40

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 40-61

.. code-block:: Python

    workflow = Workflow(
        fiber_list=fiber_list,          # List of fiber to be added in the mesh, the order matters.
        wavelength=wavelength,          # Wavelength used for the mode computation.
        resolution=50,                  # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds=DomainAlignment.LEFT,  # Mesh x-boundary structure.
        y_bounds=DomainAlignment.TOP,   # Mesh y-boundary structure.
        air_padding_factor=1.2,
        boundaries=boundaries,          # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=6,                # Total computed and sorted mode.
        n_added_mode=4,                 # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        plot_geometry=True,             # Plot the geometry mesh before computation.
        debug_mode=0,                   # Print the iteration step for the solver plus some other important steps.
        auto_label=True,                # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.2,                  # Final value of inverse taper ratio to simulate
        index_scrambling=0,             # Scrambling of refractive index value in order to lift mode degeneracy [useful for some analysis]
        n_step=50
    )

    superset = workflow.get_superset()
    itr_list = superset.model_parameters.itr_list




.. image-sg:: /gallery/validation/images/sphx_glr_plot_beta_SMF28_001.png
   :alt: Fiber structure, Fiber structure
   :srcset: /gallery/validation/images/sphx_glr_plot_beta_SMF28_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-63

Computing the analytical values using FiberModes solver.

.. GENERATED FROM PYTHON SOURCE LINES 63-69

.. code-block:: Python

    dcf_fiber = load_fiber(
        fiber_name=fiber_name,
        wavelength=wavelength,
        add_air_layer=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 70-71

Preparing the figure

.. GENERATED FROM PYTHON SOURCE LINES 71-108

.. code-block:: Python

    figure, ax = plt.subplots(1, 1)
    ax.set(
        xlabel='Inverse taper ratio',
        ylabel='Effective index',
    )


    pyfibermodes_mode = LP01
    supymode_mode = superset.LP01

    analytical = numpy.empty(itr_list.shape)
    for idx, itr in enumerate(itr_list):
        _fiber = dcf_fiber.scale(factor=itr)
        analytical[idx] = _fiber.get_effective_index(mode=pyfibermodes_mode)

    ax.plot(
        itr_list,
        analytical,
        label=str(pyfibermodes_mode) + ": PyFiberModes",
        linestyle='-',
        linewidth=2,
        color='red'
    )

    ax.scatter(
        itr_list,
        supymode_mode.index.data,
        label=str(supymode_mode) + ": SuPyMode",
        color='black',
        linewidth=2,
        s=80
    )

    plt.show()


    # -



.. image-sg:: /gallery/validation/images/sphx_glr_plot_beta_SMF28_002.png
   :alt: plot beta SMF28
   :srcset: /gallery/validation/images/sphx_glr_plot_beta_SMF28_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.825 seconds)


.. _sphx_glr_download_gallery_validation_plot_beta_SMF28.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_beta_SMF28.ipynb <plot_beta_SMF28.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_beta_SMF28.py <plot_beta_SMF28.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_beta_SMF28.zip <plot_beta_SMF28.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/extra/plot_graded_index.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_extra_plot_graded_index.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_extra_plot_graded_index.py:


1x1 Coupler
===========

.. GENERATED FROM PYTHON SOURCE LINES 8-9

Importing the script dependencies

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: Python

    from SuPyMode.workflow import Workflow, Boundaries, BoundaryValue, GenericFiber
    from PyOptik import MaterialBank

    wavelength = 1550e-9









.. GENERATED FROM PYTHON SOURCE LINES 16-19

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 19-39

.. code-block:: Python


    clad_refractive_index = MaterialBank.fused_silica.compute_refractive_index(wavelength)  # Refractive index of silica at the specified wavelength

    fiber = GenericFiber()

    fiber.create_and_add_new_structure(
        name='cladding',
        refractive_index=1.4450,
        radius=62.5 * 1e-6
    )

    fiber.create_and_add_new_graded_index_structure(
        name='core',
        is_graded=True,
        refractive_index_out=1.4450,
        refractive_index_in=1.4480,
        radius=8.0 * 1e-6
    )









.. GENERATED FROM PYTHON SOURCE LINES 40-41

Defining the boundaries of the system

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: Python

    boundaries = [
        Boundaries(right=BoundaryValue.SYMMETRIC, top=BoundaryValue.SYMMETRIC),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 46-49

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 49-68

.. code-block:: Python

    workflow = Workflow(
        fiber_list=[fiber],              # List of fiber to be added in the mesh, the order matters.
        wavelength=wavelength,           # Wavelength used for the mode computation.
        resolution=120,                  # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds=(-70e-6, 0.),           # Mesh x-boundary structure.
        y_bounds=(-70e-6, 0.),           # Mesh y-boundary structure.
        boundaries=boundaries,           # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=4,                 # Total computed and sorted mode.
        n_added_mode=2,                  # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        plot_geometry=True,              # Plot the geometry mesh before computation.
        debug_mode=1,                    # Print the iteration step for the solver plus some other important steps.
        auto_label=True,                 # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.05,                  # Final value of inverse taper ratio to simulate
        clad_rotation=0,                 # Rotate the geoemtry in the given angle in degree
        index_scrambling=0               # Scrambling of refractive index value in order to lift mode degeneracy [useful for some analysis]
    )

    superset = workflow.get_superset()




.. image-sg:: /gallery/extra/images/sphx_glr_plot_graded_index_001.png
   :alt: Fiber structure, Fiber structure
   :srcset: /gallery/extra/images/sphx_glr_plot_graded_index_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-71

Field computation: :math:`E_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: Python

    _ = superset.plot(plot_type='field', itr_list=[1.0, 0.1])




.. image-sg:: /gallery/extra/images/sphx_glr_plot_graded_index_002.png
   :alt: $LP01$ slice: 0  itr: 1.000, $LP21_a$ slice: 0  itr: 1.000, $LP02$ slice: 0  itr: 1.000, $LP41_a$ slice: 0  itr: 1.000, $LP01$ slice: 473  itr: 0.099, $LP21_a$ slice: 473  itr: 0.099, $LP02$ slice: 473  itr: 0.099, $LP41_a$ slice: 473  itr: 0.099
   :srcset: /gallery/extra/images/sphx_glr_plot_graded_index_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-76

Effective index: :math:`n^{eff}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: Python

    _ = superset.plot(plot_type='index')




.. image-sg:: /gallery/extra/images/sphx_glr_plot_graded_index_003.png
   :alt: plot graded index
   :srcset: /gallery/extra/images/sphx_glr_plot_graded_index_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-81

Modal normalized coupling: :math:`C_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: Python

    _ = superset.plot(plot_type='normalized-coupling')




.. image-sg:: /gallery/extra/images/sphx_glr_plot_graded_index_004.png
   :alt: plot graded index
   :srcset: /gallery/extra/images/sphx_glr_plot_graded_index_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-86

Adiabatic criterion: :math:`\tilde{C}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: Python

    _ = superset.plot(plot_type='adiabatic')

    # -



.. image-sg:: /gallery/extra/images/sphx_glr_plot_graded_index_005.png
   :alt: plot graded index
   :srcset: /gallery/extra/images/sphx_glr_plot_graded_index_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 1.106 seconds)


.. _sphx_glr_download_gallery_extra_plot_graded_index.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_graded_index.ipynb <plot_graded_index.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_graded_index.py <plot_graded_index.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_graded_index.zip <plot_graded_index.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/basic/plot_workflow_02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_basic_plot_workflow_02.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_basic_plot_workflow_02.py:


2x2 Coupler
===========

.. GENERATED FROM PYTHON SOURCE LINES 8-9

Importing the script dependencies

.. GENERATED FROM PYTHON SOURCE LINES 9-13

.. code-block:: Python

    from SuPyMode.workflow import Workflow, configuration, fiber_catalogue, Boundaries

    wavelength = 1550e-9








.. GENERATED FROM PYTHON SOURCE LINES 14-17

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 17-24

.. code-block:: Python

    clad_structure = configuration.ring.FusedProfile_02x02

    fiber_list = [
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Defining the boundaries of the system

.. GENERATED FROM PYTHON SOURCE LINES 26-31

.. code-block:: Python

    boundaries = [
        Boundaries(right='symmetric', top='symmetric'),
        Boundaries(right='symmetric', top='anti-symmetric')
    ]








.. GENERATED FROM PYTHON SOURCE LINES 32-35

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 35-56

.. code-block:: Python

    workflow = Workflow(
        fiber_list=fiber_list,          # List of fiber to be added in the mesh, the order matters.
        clad_structure=clad_structure,  # Cladding structure, if None provided then no cladding is set.
        fusion_degree=0.9,              # Degree of fusion of the structure if applicable.
        wavelength=wavelength,          # Wavelength used for the mode computation.
        resolution=20,                  # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds="left",                # Mesh x-boundary structure.
        y_bounds="bottom",              # Mesh y-boundary structure.
        boundaries=boundaries,          # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=3,                # Total computed and sorted mode.
        n_added_mode=2,                 # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        # plot_geometry=True,             # Plot the geometry mesh before computation.
        debug_mode=0,                   # Print the iteration step for the solver plus some other important steps.
        auto_label=True,                # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.1,                  # Final value of inverse taper ratio to simulate
        clad_rotation=0,                # Rotate the geoemtry in the given angle in degree
        index_scrambling=1e-4           # Scrambling of refractive index value in order to lift mode degeneracy [useful for some analysis]
    )

    superset = workflow.get_superset()








.. GENERATED FROM PYTHON SOURCE LINES 57-60

Field computation: :math:`E_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ = superset.plot(plot_type='field', itr_list=[1.0, 0.1])

.. GENERATED FROM PYTHON SOURCE LINES 62-65

Effective index: :math:`n^{eff}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ = superset.plot(plot_type='beta')

.. GENERATED FROM PYTHON SOURCE LINES 65-71

.. code-block:: Python


    # # %%
    # # Modal normalized coupling: :math:`C_{i,j}`
    # # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # _ = superset.plot(plot_type='normalized-coupling')








.. GENERATED FROM PYTHON SOURCE LINES 72-74

Adiabatic criterion: :math:`\tilde{C}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: Python

    _ = superset.plot(plot_type='adiabatic', save_filename='test')


    # -



.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_02_001.png
   :alt: plot workflow 02
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_02_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.465 seconds)


.. _sphx_glr_download_gallery_basic_plot_workflow_02.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_workflow_02.ipynb <plot_workflow_02.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_workflow_02.py <plot_workflow_02.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_workflow_02.zip <plot_workflow_02.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

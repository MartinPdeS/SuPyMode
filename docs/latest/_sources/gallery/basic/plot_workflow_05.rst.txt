
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/basic/plot_workflow_05.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_basic_plot_workflow_05.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_basic_plot_workflow_05.py:


5x5 Coupler
===========

.. GENERATED FROM PYTHON SOURCE LINES 8-9

Importing the script dependencies

.. GENERATED FROM PYTHON SOURCE LINES 9-11

.. code-block:: Python

    from SuPyMode.workflow import Workflow, configuration, fiber_catalogue, Boundaries








.. GENERATED FROM PYTHON SOURCE LINES 12-15

Creating the fiber list for mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we want to simulate a single fiber at wavelength 1550 nm.

.. GENERATED FROM PYTHON SOURCE LINES 15-18

.. code-block:: Python

    wavelength = 1550e-9









.. GENERATED FROM PYTHON SOURCE LINES 19-22

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 22-35

.. code-block:: Python

    clad_structure = configuration.ring.FusedProfile_07x07

    fiber_list = [
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
    ]









.. GENERATED FROM PYTHON SOURCE LINES 36-37

Defining the boundaries of the system

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: Python

    boundaries = [
        Boundaries()
    ]








.. GENERATED FROM PYTHON SOURCE LINES 42-45

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 45-66

.. code-block:: Python

    workflow = Workflow(
        fiber_list=fiber_list,          # List of fiber to be added in the mesh, the order matters.
        clad_structure=clad_structure,  # Cladding structure, if None provided then no cladding is set.
        fusion_degree=0.3,              # Degree of fusion of the structure if applicable.
        wavelength=wavelength,          # Wavelength used for the mode computation.
        resolution=60,                  # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds="centering",           # Mesh x-boundary structure.
        y_bounds="centering",           # Mesh y-boundary structure.
        boundaries=boundaries,          # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=6,                # Total computed and sorted mode.
        n_added_mode=3,                 # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        plot_geometry=True,             # Plot the geometry mesh before computation.
        debug_mode=0,                   # Print the iteration step for the solver plus some other important steps.
        auto_label=False,               # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.1,                  # Final value of inverse taper ratio to simulate
        clad_rotation=0,                # Rotate the geoemtry in the given angle in degree
        index_scrambling=1e-4           # Scrambling of refractive index value in order to lift mode degeneracy [useful for some analysis]
    )

    superset = workflow.get_superset()




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_05_001.png
   :alt: Fiber structure, Fiber structure
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_05_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-69

Field computation: :math:`E_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: Python

    _ = superset.plot(plot_type='field', itr_list=[1.0, 0.1])




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_05_002.png
   :alt: $mode_{0}$ slice: 0  itr: 1.000, $mode_{1}$ slice: 0  itr: 1.000, $mode_{2}$ slice: 0  itr: 1.000, $mode_{3}$ slice: 0  itr: 1.000, $mode_{4}$ slice: 0  itr: 1.000, $mode_{5}$ slice: 0  itr: 1.000, $mode_{0}$ slice: 499  itr: 0.100, $mode_{1}$ slice: 499  itr: 0.100, $mode_{2}$ slice: 499  itr: 0.100, $mode_{3}$ slice: 499  itr: 0.100, $mode_{4}$ slice: 499  itr: 0.100, $mode_{5}$ slice: 499  itr: 0.100
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_05_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-74

Effective index: :math:`n^{eff}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: Python

    _ = superset.plot(plot_type='index')




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_05_003.png
   :alt: plot workflow 05
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_05_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 77-79

Modal normalized coupling: :math:`C_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: Python

    _ = superset.plot(plot_type='normalized-coupling')




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_05_004.png
   :alt: plot workflow 05
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_05_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-84

Adiabatic criterion: :math:`\tilde{C}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: Python

    _ = superset.plot(plot_type='adiabatic')

    # -



.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_05_005.png
   :alt: plot workflow 05
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_05_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.577 seconds)


.. _sphx_glr_download_gallery_basic_plot_workflow_05.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_workflow_05.ipynb <plot_workflow_05.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_workflow_05.py <plot_workflow_05.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_workflow_05.zip <plot_workflow_05.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

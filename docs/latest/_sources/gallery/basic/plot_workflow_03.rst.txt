
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/basic/plot_workflow_03.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_basic_plot_workflow_03.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_basic_plot_workflow_03.py:


3x3 Coupler
===========

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Importing the script dependencies

.. GENERATED FROM PYTHON SOURCE LINES 8-10

.. code-block:: Python

    from SuPyMode.workflow import Workflow, configuration, fiber_catalogue, Boundaries








.. GENERATED FROM PYTHON SOURCE LINES 11-14

Creating the fiber list for mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we want to simulate a single fiber at wavelength 1550 nm.

.. GENERATED FROM PYTHON SOURCE LINES 14-16

.. code-block:: Python

    wavelength = 1550e-9








.. GENERATED FROM PYTHON SOURCE LINES 17-20

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 20-43

.. code-block:: Python

    clad_structure = configuration.ring.FusedProfile_03x03

    custom_fiber = fiber_catalogue.CustomFiber(wavelength=1.55e-6)
    custom_fiber.add_silica_pure_cladding(radius=62.5e-6, name='outer-clad')

    custom_fiber.create_and_add_new_structure(
        radius=40e-6 / 2,
        NA=0.13,
        name='inner-clad'
    )
    custom_fiber.create_and_add_new_structure(
        radius=9.2e-6 / 2,
        NA=0.13,
        name='core'
    )

    fiber_list = [
        fiber_catalogue.load_fiber('DCF1300S_42', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength),
        custom_fiber
    ]









.. GENERATED FROM PYTHON SOURCE LINES 44-45

Defining the boundaries of the system

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: Python

    boundaries = [
        Boundaries(),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 50-53

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 53-74

.. code-block:: Python

    workflow = Workflow(
        fiber_list=fiber_list,          # List of fiber to be added in the mesh, the order matters.
        clad_structure=clad_structure,  # Cladding structure, if None provided then no cladding is set.
        fusion_degree=0.8,           # Degree of fusion of the structure if applicable.
        wavelength=wavelength,          # Wavelength used for the mode computation.
        resolution=40,                  # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds="centering",           # Mesh x-boundary structure.
        y_bounds="centering",           # Mesh y-boundary structure.
        boundaries=boundaries,          # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=2,                # Total computed and sorted mode.
        n_added_mode=5,                 # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        plot_geometry=True,             # Plot the geometry mesh before computation.
        debug_mode=3,                   # Print the iteration step for the solver plus some other important steps.
        auto_label=True,                # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.05,                  # Final value of inverse taper ratio to simulate
        clad_rotation=0,                # Rotate the geoemtry in the given angle in degree
        index_scrambling=1e-7           # Scrambling of refractive index value in order to lift mode degeneracy [useful for some analysis]
    )

    superset = workflow.get_superset()




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_03_001.png
   :alt: Fiber structure, Fiber structure
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_03_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-77

Field computation: :math:`E_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    _ = superset.plot(plot_type='field', slice_list=[], itr_list=[1.0, 0.3, 0.1])




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_03_002.png
   :alt: $LP01$ slice: 0  itr: 1.000, $LP11_a$ slice: 0  itr: 1.000, $LP01$ slice: 368  itr: 0.299, $LP11_a$ slice: 368  itr: 0.299, $LP01$ slice: 473  itr: 0.099, $LP11_a$ slice: 473  itr: 0.099
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_03_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-82

Effective index: :math:`n^{eff}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 82-84

.. code-block:: Python

    _ = superset.plot(plot_type='index')




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_03_003.png
   :alt: plot workflow 03
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_03_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 85-87

Modal normalized coupling: :math:`C_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: Python

    _ = superset.plot(plot_type='normalized-coupling')




.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_03_004.png
   :alt: plot workflow 03
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_03_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-92

Adiabatic criterion: :math:`\tilde{C}_{i,j}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 92-95

.. code-block:: Python

    _ = superset.plot(plot_type='adiabatic')

    # -



.. image-sg:: /gallery/basic/images/sphx_glr_plot_workflow_03_005.png
   :alt: plot workflow 03
   :srcset: /gallery/basic/images/sphx_glr_plot_workflow_03_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.469 seconds)


.. _sphx_glr_download_gallery_basic_plot_workflow_03.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_workflow_03.ipynb <plot_workflow_03.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_workflow_03.py <plot_workflow_03.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_workflow_03.zip <plot_workflow_03.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/basic/plot_propagation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_basic_plot_propagation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_basic_plot_propagation.py:


4x4 Coupler [linear]
====================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Importing the script dependencies

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: Python

    from SuPyMode.workflow import Workflow, configuration, fiber_catalogue, Boundaries
    from SuPyMode.workflow import AlphaProfile

    wavelength = 1550e-9








.. GENERATED FROM PYTHON SOURCE LINES 14-17

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 17-31

.. code-block:: Python

    fiber_list = [
        fiber_catalogue.load_fiber('DCF1300S_20', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_26', wavelength=wavelength),
        fiber_catalogue.load_fiber('DCF1300S_33', wavelength=wavelength)
    ]

    clad_profile = configuration.ring.FusedProfile_03x03

    capillary_tube = fiber_catalogue.CapillaryTube(
        radius=150e-6,
        wavelength=wavelength,
        delta_n=-15e-3
    )








.. GENERATED FROM PYTHON SOURCE LINES 32-35

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 35-60

.. code-block:: Python

    workflow = Workflow(
        fiber_list=fiber_list,          # List of fiber to be added in the mesh, the order matters.
        clad_structure=clad_profile,    # Cladding structure, if None provided then no cladding is set.
        capillary_tube=capillary_tube,
        fusion_degree='auto',           # Degree of fusion of the structure if applicable.
        wavelength=wavelength,          # Wavelength used for the mode computation.
        resolution=20,                 # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds="centering",           # Mesh x-boundary structure.
        y_bounds="centering",           # Mesh y-boundary structure.
        boundaries=[Boundaries()],    # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=3,                # Total computed and sorted mode.
        n_added_mode=6,                 # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        # plot_geometry=True,             # Plot the geometry mesh before computation.
        debug_mode=0,                   # Print the iteration step for the solver plus some other important steps. [Does not work properly on jupyter notebooks]
        auto_label=False,               # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.1,                  # Final value of inverse taper ratio to simulate
        clad_rotation=0,                # Rotate the geoemtry in the given angle in degree
        index_scrambling=0e-4           # Scrambling of refractive index value in order to lift mode degeneracy [useful for some analysis]
    )

    superset = workflow.get_superset()


    profile = AlphaProfile(symmetric=False, add_end_of_taper_section=True)








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Adding a first taper segment with large initial heating length (i.e. slow reduction)

.. GENERATED FROM PYTHON SOURCE LINES 62-75

.. code-block:: Python

    profile.add_taper_segment(
        alpha=0,
        initial_heating_length=0.1e-3,
        stretching_length=0.1e-3
    )


    profile.initialize()

    propagation = workflow.superset.propagate(add_coupling=False, profile=profile, initial_amplitude=[1, 0, 0])

    # propagation.generate_gif()
    # -








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.022 seconds)


.. _sphx_glr_download_gallery_basic_plot_propagation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_propagation.ipynb <plot_propagation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_propagation.py <plot_propagation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_propagation.zip <plot_propagation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

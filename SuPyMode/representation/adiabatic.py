# #!/usr/bin/env python
# # -*- coding: utf-8 -*-

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from SuPyMode.supermode import SuperMode

import numpy
from typing import NoReturn
from SuPyMode.representation.base import InheritFromSuperMode, BaseMultiModePlot
import matplotlib.pyplot as plt


class Adiabatic(InheritFromSuperMode, BaseMultiModePlot):
    """
    Represents the adiabatic criterion between modes of different supermodes in optical fiber simulations.

    This class extends from `InheritFromSuperMode` for accessing supermode-related data and `BaseMultiModePlot`
    for plotting functionalities tailored to visualize adiabatic transition measurements.

    Class Attributes:
        plot_style (dict): A dictionary defining the default style settings for plots generated by this class.
    """

    plot_style = dict(
        show_legend=True,
        x_label='Inverse taper ratio',
        y_label=r'Adiabatic criterion [$\mu$m$^{-1}$]',
        y_scale='log',
        y_scale_factor=1e-6,
        y_limits=[1e-5, 1],
        line_width=2
    )

    def __init__(self, parent_supermode: SuperMode):
        """
        Initializes an Adiabatic object with a reference to a parent supermode.

        Args:
            parent_supermode (SuperMode): The parent supermode object that provides the base mode data.
        """
        self.parent_supermode = parent_supermode

    def get_values(self, other_supermode: SuperMode) -> numpy.ndarray:
        """
        Calculates the adiabatic transition measure between the parent supermode and another specified supermode.

        Args:
            other_supermode (SuperMode): The supermode with which to compare the parent supermode.

        Returns:
            numpy.ndarray: An array of adiabatic transition measures calculated between the two supermodes,
                           possibly adjusted by compatibility considerations.
        """
        output = self.parent_supermode.binding.get_adiabatic_with_mode(other_supermode.binding)

        if not self.parent_supermode.is_computation_compatible(other_supermode):
            output *= numpy.inf

        return abs(output)

    def _dress_ax(self, ax: plt.Axes) -> NoReturn:
        ax.set_xlabel('Inverse taper ratio')
        ax.set_ylabel(r'Adiabatic criterion [$\mu$m$^{-1}$]')

# -

# #!/usr/bin/env python
# # -*- coding: utf-8 -*-

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from SuPyMode.supermode import SuperMode

import numpy

from SuPyMode.representation.base import InheritFromSuperMode, BaseMultiModePlot
from MPSPlots.render2D import SceneList, Axis


class Adiabatic(InheritFromSuperMode, BaseMultiModePlot):
    """
    Represents the adiabatic criterion between modes of different supermodes in optical fiber simulations.

    This class extends from `InheritFromSuperMode` for accessing supermode-related data and `BaseMultiModePlot`
    for plotting functionalities tailored to visualize adiabatic transition measurements.

    Class Attributes:
        plot_style (dict): A dictionary defining the default style settings for plots generated by this class.
    """

    plot_style = dict(
        show_legend=True,
        x_label='Inverse taper ratio',
        y_label=r'Adiabatic criterion [$\mu$m$^{-1}$]',
        y_scale='log',
        y_scale_factor=1e-6,
        y_limits=[1e-5, 1],
        line_width=2
    )

    def __init__(self, parent_supermode: SuperMode):
        """
        Initializes an Adiabatic object with a reference to a parent supermode.

        Args:
            parent_supermode (SuperMode): The parent supermode object that provides the base mode data.
        """
        self.parent_supermode = parent_supermode

    def get_values(self, other_supermode: SuperMode) -> numpy.ndarray:
        """
        Calculates the adiabatic transition measure between the parent supermode and another specified supermode.

        Args:
            other_supermode (SuperMode): The supermode with which to compare the parent supermode.

        Returns:
            numpy.ndarray: An array of adiabatic transition measures calculated between the two supermodes,
                           possibly adjusted by compatibility considerations.
        """
        output = self.parent_supermode.binded_supermode.get_adiabatic_with_mode(other_supermode.binded_supermode)

        if not self.parent_supermode.is_computation_compatible(other_supermode):
            output *= numpy.inf

        return output

    def render_on_ax(self, ax: Axis, other_supermode: SuperMode) -> None:
        """
        Renders adiabatic transition data as a line plot on the provided Axis object, comparing the parent supermode
        with another supermode.

        Args:
            ax (Axis): The Axis object on which to plot the adiabatic transitions.
            other_supermode (SuperMode): The other supermode to compare against.

        Note:
            This method is conditioned on computational compatibility between the supermodes.
        """
        if not self.parent_supermode.is_computation_compatible(other_supermode):
            return

        y = self.get_values(other_supermode=other_supermode)

        ax.add_line(
            x=self.itr_list,
            y=numpy.abs(y),
            label=f'{self.parent_supermode.stylized_label} - {other_supermode.stylized_label}'
        )

    def plot(self, other_supermode: SuperMode) -> SceneList:
        """
        Generates a plot of adiabatic transitions between the parent supermode and another specified supermode using a SceneList.

        This method creates a single-axis plot showing the comparative adiabatic transitions as a function of the inverse taper ratio,
        formatted according to the predefined plot style.

        Args:
            other_supermode (SuperMode): The supermode to compare against.

        Returns:
            SceneList: A scene list containing the plot of adiabatic transitions.
        """
        figure = SceneList()

        ax = figure.append_ax(**self.plot_style)

        self.render_on_ax(ax=ax, other_supermode=other_supermode)

        return figure

# -

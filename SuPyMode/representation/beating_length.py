# #!/usr/bin/env python
# # -*- coding: utf-8 -*-

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from SuPyMode.supermode import SuperMode

import numpy
from typing import NoReturn
from SuPyMode.representation.base import InheritFromSuperMode, BaseMultiModePlot
import matplotlib.pyplot as plt


class BeatingLength(InheritFromSuperMode, BaseMultiModePlot):
    """
    Represents the beating lengths between modes of different supermodes in optical fiber simulations.

    This class extends from `InheritFromSuperMode` to utilize supermode-related data and from `BaseMultiModePlot`
    for advanced plotting functionalities tailored to visualize beating length comparisons.

    Class Attributes:
        plot_style (dict): Default style settings for plots generated by this class.
    """

    plot_style = dict(
        show_legend=True,
        x_label='Inverse taper ratio',
        y_label='Beating length [m]',
        y_scale="log",
        line_width=2
    )

    def __init__(self, parent_supermode: SuperMode):
        """
        Initializes a BeatingLength object with a reference to a parent supermode.

        Args:
            parent_supermode (SuperMode): The parent supermode object that provides the base mode data.
        """
        self.parent_supermode = parent_supermode

    def get_values(self, other_supermode: SuperMode) -> numpy.ndarray:
        """
        Calculates the beating length between the parent supermode and another specified supermode.

        Args:
            other_supermode (SuperMode): The supermode with which to compare the parent supermode.

        Returns:
            numpy.ndarray: An array of beating lengths calculated between the two supermodes.
        """
        return self.parent_supermode.binding.get_beating_length_with_mode(other_supermode.binding)

    def _dress_ax(self, ax: plt.Axes) -> NoReturn:
        ax.set_xlabel('Inverse taper ratio')
        ax.set_ylabel('Beating length [m]')

# -

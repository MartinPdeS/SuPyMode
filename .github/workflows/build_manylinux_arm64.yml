name: ManyLinux-Workflow

# https://github.com/YannickJadoul/Parselmouth/blob/master/.github/workflows/wheels.yml
permissions:
  contents: write

on:
  workflow_call:
    inputs:

      update_coverage:
        type: boolean
        default: false

      publish_wheel:
        type: boolean
        required: false
        default: false
      python_wheel:
        type: string
        required: false
        default: "['3.7']"
      python_twine:
        type: string
        required: false
        default: "3.9"

      upload_documentation:
        type: boolean
        required: false
        default: false
      python_documentation:
        type: string
        required: false
        default: "3.9"




jobs:
  job_create_wheel:
    name: "Python ${{ matrix.python-version[1] }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python_wheel) }}
    steps:

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v2
        with:
          platform: arm64

      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: "Build: Wheels"
        uses: pypa/cibuildwheel@v2.11.2
        with:
          output-dir: dist
        env:
          CC: /usr/bin/gcc
          CXX: /usr/bin/g++
          CIBW_BEFORE_BUILD: 'python -m pip install -r requirements-dev.txt
                           && mkdir build && cd build
                           && cmake -G"Unix Makefiles" -DPYBIND11_PYTHON_VERSION=${{ matrix.python-version[0] }}  ./..
                           && make install
                           && cd ..'
          CIBW_BUILD: "${{ matrix.python-version[1] }}-manylinux*"
          CIBW_TEST_REQUIRES: ".[devs_all]"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS: "aarch64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_TEST_COMMAND: 'coverage run -p -m pytest -s {project}/tests
                           && coverage combine
                           && coverage report -m --skip-covered
                           && coverage json -o {project}/CoverageReport.json'

      - name: "Computing total coverage"
        run: |
          export TOTAL=$(python -c "import json;print(json.load(open('CoverageReport.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV

      - name: "Upload: Wheel"
        if: ${{ inputs.publish_wheel == true }}"
        uses: actions/upload-artifact@v3
        with:
          name: "manylinux_wheel_python${{ matrix.python-version[1] }}"
          path: ./dist/*

      - name: "Upload: Coverage badge"
        if: ${{ inputs.update_coverage == true }}"
        uses: schneegans/dynamic-badges-action@v1.4.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 16caa7bb2a83d5af36740e4a6a0f861d
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}


  job_build_documentation:
    needs: [job_create_wheel]
    if: ${{ inputs.upload_documentation == true }}"
    name: "Publish documentation to RTD"
    runs-on: ubuntu-latest
    steps:

      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: "Set-up: Python ${{ inputs.python_documentation }}"
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python_documentation }}"

      - name: "Install: Dependencies for headless server"
        run: |
          sudo apt-get install libgl1-mesa-glx xvfb

      - name: "Download: wheel"
        uses: actions/download-artifact@v3
        with:
          path: .

      - name: "Build: documentation"
        run: |
          python -m pip install -r requirements-dev.txt
          mkdir build
          cd build
          cmake -G"Unix Makefiles" -DPYBIND11_PYTHON_VERSION="${{ inputs.python_documentation }}"  ./..
          cd ..
          make -C build install
          cd ..
          make -C docs html

      - name: "Upload: GitHub Pages"
        if: ${{ inputs.upload_documentation == true }}"
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-pages
          build_dir: docs/build/html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



# -
